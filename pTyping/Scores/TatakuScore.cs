// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using pTyping.Scores;
//
//    var tatakuScore = TatakuScore.FromJson(jsonString);

namespace pTyping.Scores
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TatakuReplay
    {
        [JsonProperty("frames")]
        public List<(double, FrameClass)> Frames { get; set; }

        [JsonProperty("score_data")]
        public ScoreData ScoreData { get; set; }

        [JsonProperty("gamemode_data")]
        public GamemodeData GamemodeData { get; set; }
    }

    public partial class FrameClass
    {
        [JsonProperty("Press")]
        public string Press { get; set; }
    }

    public partial class GamemodeData
    {
    }

    public partial class ScoreData
    {
        [JsonProperty("version")]
        public long Version { get; set; }

        [JsonProperty("username")]
        public string Username { get; set; }

        [JsonProperty("beatmap_hash")]
        public string BeatmapHash { get; set; }

        [JsonProperty("playmode")]
        public string Playmode { get; set; }

        [JsonProperty("time")]
        public ulong Time { get; set; }

        [JsonProperty("score")]
        public ulong Score { get; set; }

        [JsonProperty("combo")]
        public long Combo { get; set; }

        [JsonProperty("max_combo")]
        public long MaxCombo { get; set; }

        [JsonProperty("judgments")]
        public Judgments Judgments { get; set; }

        [JsonProperty("accuracy")]
        public double Accuracy { get; set; }

        [JsonProperty("speed")]
        public double Speed { get; set; }

        [JsonProperty("mods_string")]
        public string ModsString { get; set; }

        [JsonProperty("hit_timings")]
        public List<double> HitTimings { get; set; }
    }

    public partial class Judgments
    {
        public ushort ExcellentHits {
            get;
            set;
        }
        public ushort FairHits {
            get;
            set;
        }
        public ushort GoodHits {
            get;
            set;
        }
        public ushort PoorHits {
            get;
            set;
        }
    }

    public partial struct FrameElement
    {
        public double? Double;
        public FrameClass FrameClass;

        public static implicit operator FrameElement(double Double) => new FrameElement { Double = Double };
        public static implicit operator FrameElement(FrameClass FrameClass) => new FrameElement { FrameClass = FrameClass };
    }

    public partial class TatakuScore
    {
        public static TatakuScore FromJson(string json) => JsonConvert.DeserializeObject<TatakuScore>(json, pTyping.Scores.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TatakuScore self) => JsonConvert.SerializeObject(self, pTyping.Scores.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                FrameElementConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class FrameElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FrameElement) || t == typeof(FrameElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new FrameElement { Double = doubleValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<FrameClass>(reader);
                    return new FrameElement { FrameClass = objectValue };
            }
            throw new Exception("Cannot unmarshal type FrameElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (FrameElement)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.FrameClass != null)
            {
                serializer.Serialize(writer, value.FrameClass);
                return;
            }
            throw new Exception("Cannot marshal type FrameElement");
        }

        public static readonly FrameElementConverter Singleton = new FrameElementConverter();
    }
}
